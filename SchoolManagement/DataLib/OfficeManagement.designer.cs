#pragma warning disable 1591
//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.34209
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace DataLib
{
	using System.Data.Linq;
	using System.Data.Linq.Mapping;
	using System.Data;
	using System.Collections.Generic;
	using System.Reflection;
	using System.Linq;
	using System.Linq.Expressions;
	using System.ComponentModel;
	using System;
	
	
	[global::System.Data.Linq.Mapping.DatabaseAttribute(Name="TestDB")]
	public partial class OfficeManagementDataContext : System.Data.Linq.DataContext
	{
		
		private static System.Data.Linq.Mapping.MappingSource mappingSource = new AttributeMappingSource();
		
    #region Extensibility Method Definitions
    partial void OnCreated();
    partial void InsertAcademicYear(AcademicYear instance);
    partial void UpdateAcademicYear(AcademicYear instance);
    partial void DeleteAcademicYear(AcademicYear instance);
    partial void InsertUser(User instance);
    partial void UpdateUser(User instance);
    partial void DeleteUser(User instance);
    partial void InsertAccount(Account instance);
    partial void UpdateAccount(Account instance);
    partial void DeleteAccount(Account instance);
    partial void InsertAddress(Address instance);
    partial void UpdateAddress(Address instance);
    partial void DeleteAddress(Address instance);
    partial void InsertCast(Cast instance);
    partial void UpdateCast(Cast instance);
    partial void DeleteCast(Cast instance);
    partial void InsertClass(Class instance);
    partial void UpdateClass(Class instance);
    partial void DeleteClass(Class instance);
    partial void InsertExamSubjectMark(ExamSubjectMark instance);
    partial void UpdateExamSubjectMark(ExamSubjectMark instance);
    partial void DeleteExamSubjectMark(ExamSubjectMark instance);
    partial void InsertExamType(ExamType instance);
    partial void UpdateExamType(ExamType instance);
    partial void DeleteExamType(ExamType instance);
    partial void InsertFeeMaster(FeeMaster instance);
    partial void UpdateFeeMaster(FeeMaster instance);
    partial void DeleteFeeMaster(FeeMaster instance);
    partial void InsertGroup(Group instance);
    partial void UpdateGroup(Group instance);
    partial void DeleteGroup(Group instance);
    partial void InsertMedium(Medium instance);
    partial void UpdateMedium(Medium instance);
    partial void DeleteMedium(Medium instance);
    partial void InsertScholarShip(ScholarShip instance);
    partial void UpdateScholarShip(ScholarShip instance);
    partial void DeleteScholarShip(ScholarShip instance);
    partial void InsertScholarShipDetail(ScholarShipDetail instance);
    partial void UpdateScholarShipDetail(ScholarShipDetail instance);
    partial void DeleteScholarShipDetail(ScholarShipDetail instance);
    partial void InsertSection(Section instance);
    partial void UpdateSection(Section instance);
    partial void DeleteSection(Section instance);
    partial void InsertStudent(Student instance);
    partial void UpdateStudent(Student instance);
    partial void DeleteStudent(Student instance);
    partial void InsertSubjectMaster(SubjectMaster instance);
    partial void UpdateSubjectMaster(SubjectMaster instance);
    partial void DeleteSubjectMaster(SubjectMaster instance);
    partial void InsertSubjectTable(SubjectTable instance);
    partial void UpdateSubjectTable(SubjectTable instance);
    partial void DeleteSubjectTable(SubjectTable instance);
    partial void InsertTransactionDetail(TransactionDetail instance);
    partial void UpdateTransactionDetail(TransactionDetail instance);
    partial void DeleteTransactionDetail(TransactionDetail instance);
    partial void Inserttrig(trig instance);
    partial void Updatetrig(trig instance);
    partial void Deletetrig(trig instance);
    partial void InsertUserGroupAssociation(UserGroupAssociation instance);
    partial void UpdateUserGroupAssociation(UserGroupAssociation instance);
    partial void DeleteUserGroupAssociation(UserGroupAssociation instance);
    #endregion
		
		public OfficeManagementDataContext() : 
				base(global::DataLib.Properties.Settings.Default.TestDBConnectionString1, mappingSource)
		{
			OnCreated();
		}
		
		public OfficeManagementDataContext(string connection) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public OfficeManagementDataContext(System.Data.IDbConnection connection) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public OfficeManagementDataContext(string connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public OfficeManagementDataContext(System.Data.IDbConnection connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public System.Data.Linq.Table<AcademicYear> AcademicYears
		{
			get
			{
				return this.GetTable<AcademicYear>();
			}
		}
		
		public System.Data.Linq.Table<User> Users
		{
			get
			{
				return this.GetTable<User>();
			}
		}
		
		public System.Data.Linq.Table<Account> Accounts
		{
			get
			{
				return this.GetTable<Account>();
			}
		}
		
		public System.Data.Linq.Table<Address> Addresses
		{
			get
			{
				return this.GetTable<Address>();
			}
		}
		
		public System.Data.Linq.Table<Cast> Casts
		{
			get
			{
				return this.GetTable<Cast>();
			}
		}
		
		public System.Data.Linq.Table<Class> Classes
		{
			get
			{
				return this.GetTable<Class>();
			}
		}
		
		public System.Data.Linq.Table<ExamSubjectMark> ExamSubjectMarks
		{
			get
			{
				return this.GetTable<ExamSubjectMark>();
			}
		}
		
		public System.Data.Linq.Table<ExamType> ExamTypes
		{
			get
			{
				return this.GetTable<ExamType>();
			}
		}
		
		public System.Data.Linq.Table<FeeMaster> FeeMasters
		{
			get
			{
				return this.GetTable<FeeMaster>();
			}
		}
		
		public System.Data.Linq.Table<Group> Groups
		{
			get
			{
				return this.GetTable<Group>();
			}
		}
		
		public System.Data.Linq.Table<Medium> Mediums
		{
			get
			{
				return this.GetTable<Medium>();
			}
		}
		
		public System.Data.Linq.Table<ScholarShip> ScholarShips
		{
			get
			{
				return this.GetTable<ScholarShip>();
			}
		}
		
		public System.Data.Linq.Table<ScholarShipDetail> ScholarShipDetails
		{
			get
			{
				return this.GetTable<ScholarShipDetail>();
			}
		}
		
		public System.Data.Linq.Table<Section> Sections
		{
			get
			{
				return this.GetTable<Section>();
			}
		}
		
		public System.Data.Linq.Table<Student> Students
		{
			get
			{
				return this.GetTable<Student>();
			}
		}
		
		public System.Data.Linq.Table<SubjectMaster> SubjectMasters
		{
			get
			{
				return this.GetTable<SubjectMaster>();
			}
		}
		
		public System.Data.Linq.Table<SubjectTable> SubjectTables
		{
			get
			{
				return this.GetTable<SubjectTable>();
			}
		}
		
		public System.Data.Linq.Table<TransactionDetail> TransactionDetails
		{
			get
			{
				return this.GetTable<TransactionDetail>();
			}
		}
		
		public System.Data.Linq.Table<trig> trigs
		{
			get
			{
				return this.GetTable<trig>();
			}
		}
		
		public System.Data.Linq.Table<trig_archive> trig_archives
		{
			get
			{
				return this.GetTable<trig_archive>();
			}
		}
		
		public System.Data.Linq.Table<UserGroupAssociation> UserGroupAssociations
		{
			get
			{
				return this.GetTable<UserGroupAssociation>();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.AcademicYear")]
	public partial class AcademicYear : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _AcademicYearId;
		
		private System.DateTime _AcademicYearStart;
		
		private System.DateTime _AcademicYearEnd;
		
		private bool _isActive;
		
		private EntitySet<Account> _Accounts;
		
		private EntitySet<FeeMaster> _FeeMasters;
		
		private EntitySet<ScholarShipDetail> _ScholarShipDetails;
		
		private EntitySet<TransactionDetail> _TransactionDetails;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnAcademicYearIdChanging(int value);
    partial void OnAcademicYearIdChanged();
    partial void OnAcademicYearStartChanging(System.DateTime value);
    partial void OnAcademicYearStartChanged();
    partial void OnAcademicYearEndChanging(System.DateTime value);
    partial void OnAcademicYearEndChanged();
    partial void OnisActiveChanging(bool value);
    partial void OnisActiveChanged();
    #endregion
		
		public AcademicYear()
		{
			this._Accounts = new EntitySet<Account>(new Action<Account>(this.attach_Accounts), new Action<Account>(this.detach_Accounts));
			this._FeeMasters = new EntitySet<FeeMaster>(new Action<FeeMaster>(this.attach_FeeMasters), new Action<FeeMaster>(this.detach_FeeMasters));
			this._ScholarShipDetails = new EntitySet<ScholarShipDetail>(new Action<ScholarShipDetail>(this.attach_ScholarShipDetails), new Action<ScholarShipDetail>(this.detach_ScholarShipDetails));
			this._TransactionDetails = new EntitySet<TransactionDetail>(new Action<TransactionDetail>(this.attach_TransactionDetails), new Action<TransactionDetail>(this.detach_TransactionDetails));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_AcademicYearId", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int AcademicYearId
		{
			get
			{
				return this._AcademicYearId;
			}
			set
			{
				if ((this._AcademicYearId != value))
				{
					this.OnAcademicYearIdChanging(value);
					this.SendPropertyChanging();
					this._AcademicYearId = value;
					this.SendPropertyChanged("AcademicYearId");
					this.OnAcademicYearIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_AcademicYearStart", DbType="DateTime NOT NULL")]
		public System.DateTime AcademicYearStart
		{
			get
			{
				return this._AcademicYearStart;
			}
			set
			{
				if ((this._AcademicYearStart != value))
				{
					this.OnAcademicYearStartChanging(value);
					this.SendPropertyChanging();
					this._AcademicYearStart = value;
					this.SendPropertyChanged("AcademicYearStart");
					this.OnAcademicYearStartChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_AcademicYearEnd", DbType="DateTime NOT NULL")]
		public System.DateTime AcademicYearEnd
		{
			get
			{
				return this._AcademicYearEnd;
			}
			set
			{
				if ((this._AcademicYearEnd != value))
				{
					this.OnAcademicYearEndChanging(value);
					this.SendPropertyChanging();
					this._AcademicYearEnd = value;
					this.SendPropertyChanged("AcademicYearEnd");
					this.OnAcademicYearEndChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_isActive", DbType="Bit NOT NULL")]
		public bool isActive
		{
			get
			{
				return this._isActive;
			}
			set
			{
				if ((this._isActive != value))
				{
					this.OnisActiveChanging(value);
					this.SendPropertyChanging();
					this._isActive = value;
					this.SendPropertyChanged("isActive");
					this.OnisActiveChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="AcademicYear_Account", Storage="_Accounts", ThisKey="AcademicYearId", OtherKey="AcademicYearId")]
		public EntitySet<Account> Accounts
		{
			get
			{
				return this._Accounts;
			}
			set
			{
				this._Accounts.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="AcademicYear_FeeMaster", Storage="_FeeMasters", ThisKey="AcademicYearId", OtherKey="AcademicYearId")]
		public EntitySet<FeeMaster> FeeMasters
		{
			get
			{
				return this._FeeMasters;
			}
			set
			{
				this._FeeMasters.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="AcademicYear_ScholarShipDetail", Storage="_ScholarShipDetails", ThisKey="AcademicYearId", OtherKey="AcademicYearId")]
		public EntitySet<ScholarShipDetail> ScholarShipDetails
		{
			get
			{
				return this._ScholarShipDetails;
			}
			set
			{
				this._ScholarShipDetails.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="AcademicYear_TransactionDetail", Storage="_TransactionDetails", ThisKey="AcademicYearId", OtherKey="AcademicYearId")]
		public EntitySet<TransactionDetail> TransactionDetails
		{
			get
			{
				return this._TransactionDetails;
			}
			set
			{
				this._TransactionDetails.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Accounts(Account entity)
		{
			this.SendPropertyChanging();
			entity.AcademicYear = this;
		}
		
		private void detach_Accounts(Account entity)
		{
			this.SendPropertyChanging();
			entity.AcademicYear = null;
		}
		
		private void attach_FeeMasters(FeeMaster entity)
		{
			this.SendPropertyChanging();
			entity.AcademicYear = this;
		}
		
		private void detach_FeeMasters(FeeMaster entity)
		{
			this.SendPropertyChanging();
			entity.AcademicYear = null;
		}
		
		private void attach_ScholarShipDetails(ScholarShipDetail entity)
		{
			this.SendPropertyChanging();
			entity.AcademicYear = this;
		}
		
		private void detach_ScholarShipDetails(ScholarShipDetail entity)
		{
			this.SendPropertyChanging();
			entity.AcademicYear = null;
		}
		
		private void attach_TransactionDetails(TransactionDetail entity)
		{
			this.SendPropertyChanging();
			entity.AcademicYear = this;
		}
		
		private void detach_TransactionDetails(TransactionDetail entity)
		{
			this.SendPropertyChanging();
			entity.AcademicYear = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.[User]")]
	public partial class User : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _UserId;
		
		private string _UserName;
		
		private string _UserEmail;
		
		private string _UserPassword;
		
		private System.Nullable<System.DateTime> _PasswordChangeDate;
		
		private System.Nullable<System.DateTime> _DateAdded;
		
		private System.Nullable<System.DateTime> _EffectiveDate;
		
		private System.Nullable<System.DateTime> _ExpirationDate;
		
		private string _UserTitle;
		
		private System.Nullable<int> _Status;
		
		private bool _IsDeleted;
		
		private int _AddressId;
		
		private System.Nullable<System.DateTime> _LastLoginDate;
		
		private EntitySet<TransactionDetail> _TransactionDetails;
		
		private EntitySet<UserGroupAssociation> _UserGroupAssociations;
		
		private EntityRef<Address> _Address;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnUserIdChanging(int value);
    partial void OnUserIdChanged();
    partial void OnUserNameChanging(string value);
    partial void OnUserNameChanged();
    partial void OnUserEmailChanging(string value);
    partial void OnUserEmailChanged();
    partial void OnUserPasswordChanging(string value);
    partial void OnUserPasswordChanged();
    partial void OnPasswordChangeDateChanging(System.Nullable<System.DateTime> value);
    partial void OnPasswordChangeDateChanged();
    partial void OnDateAddedChanging(System.Nullable<System.DateTime> value);
    partial void OnDateAddedChanged();
    partial void OnEffectiveDateChanging(System.Nullable<System.DateTime> value);
    partial void OnEffectiveDateChanged();
    partial void OnExpirationDateChanging(System.Nullable<System.DateTime> value);
    partial void OnExpirationDateChanged();
    partial void OnUserTitleChanging(string value);
    partial void OnUserTitleChanged();
    partial void OnStatusChanging(System.Nullable<int> value);
    partial void OnStatusChanged();
    partial void OnIsDeletedChanging(bool value);
    partial void OnIsDeletedChanged();
    partial void OnAddressIdChanging(int value);
    partial void OnAddressIdChanged();
    partial void OnLastLoginDateChanging(System.Nullable<System.DateTime> value);
    partial void OnLastLoginDateChanged();
    #endregion
		
		public User()
		{
			this._TransactionDetails = new EntitySet<TransactionDetail>(new Action<TransactionDetail>(this.attach_TransactionDetails), new Action<TransactionDetail>(this.detach_TransactionDetails));
			this._UserGroupAssociations = new EntitySet<UserGroupAssociation>(new Action<UserGroupAssociation>(this.attach_UserGroupAssociations), new Action<UserGroupAssociation>(this.detach_UserGroupAssociations));
			this._Address = default(EntityRef<Address>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_UserId", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int UserId
		{
			get
			{
				return this._UserId;
			}
			set
			{
				if ((this._UserId != value))
				{
					this.OnUserIdChanging(value);
					this.SendPropertyChanging();
					this._UserId = value;
					this.SendPropertyChanged("UserId");
					this.OnUserIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_UserName", DbType="NVarChar(50)")]
		public string UserName
		{
			get
			{
				return this._UserName;
			}
			set
			{
				if ((this._UserName != value))
				{
					this.OnUserNameChanging(value);
					this.SendPropertyChanging();
					this._UserName = value;
					this.SendPropertyChanged("UserName");
					this.OnUserNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_UserEmail", DbType="NVarChar(50)")]
		public string UserEmail
		{
			get
			{
				return this._UserEmail;
			}
			set
			{
				if ((this._UserEmail != value))
				{
					this.OnUserEmailChanging(value);
					this.SendPropertyChanging();
					this._UserEmail = value;
					this.SendPropertyChanged("UserEmail");
					this.OnUserEmailChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_UserPassword", DbType="NVarChar(50)")]
		public string UserPassword
		{
			get
			{
				return this._UserPassword;
			}
			set
			{
				if ((this._UserPassword != value))
				{
					this.OnUserPasswordChanging(value);
					this.SendPropertyChanging();
					this._UserPassword = value;
					this.SendPropertyChanged("UserPassword");
					this.OnUserPasswordChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_PasswordChangeDate", DbType="DateTime")]
		public System.Nullable<System.DateTime> PasswordChangeDate
		{
			get
			{
				return this._PasswordChangeDate;
			}
			set
			{
				if ((this._PasswordChangeDate != value))
				{
					this.OnPasswordChangeDateChanging(value);
					this.SendPropertyChanging();
					this._PasswordChangeDate = value;
					this.SendPropertyChanged("PasswordChangeDate");
					this.OnPasswordChangeDateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_DateAdded", DbType="DateTime")]
		public System.Nullable<System.DateTime> DateAdded
		{
			get
			{
				return this._DateAdded;
			}
			set
			{
				if ((this._DateAdded != value))
				{
					this.OnDateAddedChanging(value);
					this.SendPropertyChanging();
					this._DateAdded = value;
					this.SendPropertyChanged("DateAdded");
					this.OnDateAddedChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_EffectiveDate", DbType="DateTime")]
		public System.Nullable<System.DateTime> EffectiveDate
		{
			get
			{
				return this._EffectiveDate;
			}
			set
			{
				if ((this._EffectiveDate != value))
				{
					this.OnEffectiveDateChanging(value);
					this.SendPropertyChanging();
					this._EffectiveDate = value;
					this.SendPropertyChanged("EffectiveDate");
					this.OnEffectiveDateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ExpirationDate", DbType="DateTime")]
		public System.Nullable<System.DateTime> ExpirationDate
		{
			get
			{
				return this._ExpirationDate;
			}
			set
			{
				if ((this._ExpirationDate != value))
				{
					this.OnExpirationDateChanging(value);
					this.SendPropertyChanging();
					this._ExpirationDate = value;
					this.SendPropertyChanged("ExpirationDate");
					this.OnExpirationDateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_UserTitle", DbType="NVarChar(150)")]
		public string UserTitle
		{
			get
			{
				return this._UserTitle;
			}
			set
			{
				if ((this._UserTitle != value))
				{
					this.OnUserTitleChanging(value);
					this.SendPropertyChanging();
					this._UserTitle = value;
					this.SendPropertyChanged("UserTitle");
					this.OnUserTitleChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Status", DbType="Int")]
		public System.Nullable<int> Status
		{
			get
			{
				return this._Status;
			}
			set
			{
				if ((this._Status != value))
				{
					this.OnStatusChanging(value);
					this.SendPropertyChanging();
					this._Status = value;
					this.SendPropertyChanged("Status");
					this.OnStatusChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_IsDeleted", DbType="Bit NOT NULL")]
		public bool IsDeleted
		{
			get
			{
				return this._IsDeleted;
			}
			set
			{
				if ((this._IsDeleted != value))
				{
					this.OnIsDeletedChanging(value);
					this.SendPropertyChanging();
					this._IsDeleted = value;
					this.SendPropertyChanged("IsDeleted");
					this.OnIsDeletedChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_AddressId", DbType="Int NOT NULL")]
		public int AddressId
		{
			get
			{
				return this._AddressId;
			}
			set
			{
				if ((this._AddressId != value))
				{
					if (this._Address.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnAddressIdChanging(value);
					this.SendPropertyChanging();
					this._AddressId = value;
					this.SendPropertyChanged("AddressId");
					this.OnAddressIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_LastLoginDate", DbType="DateTime")]
		public System.Nullable<System.DateTime> LastLoginDate
		{
			get
			{
				return this._LastLoginDate;
			}
			set
			{
				if ((this._LastLoginDate != value))
				{
					this.OnLastLoginDateChanging(value);
					this.SendPropertyChanging();
					this._LastLoginDate = value;
					this.SendPropertyChanged("LastLoginDate");
					this.OnLastLoginDateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="User_TransactionDetail", Storage="_TransactionDetails", ThisKey="UserId", OtherKey="UserId")]
		public EntitySet<TransactionDetail> TransactionDetails
		{
			get
			{
				return this._TransactionDetails;
			}
			set
			{
				this._TransactionDetails.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="User_UserGroupAssociation", Storage="_UserGroupAssociations", ThisKey="UserId", OtherKey="UserId")]
		public EntitySet<UserGroupAssociation> UserGroupAssociations
		{
			get
			{
				return this._UserGroupAssociations;
			}
			set
			{
				this._UserGroupAssociations.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Address_User", Storage="_Address", ThisKey="AddressId", OtherKey="AddressId", IsForeignKey=true)]
		public Address Address
		{
			get
			{
				return this._Address.Entity;
			}
			set
			{
				Address previousValue = this._Address.Entity;
				if (((previousValue != value) 
							|| (this._Address.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Address.Entity = null;
						previousValue.Users.Remove(this);
					}
					this._Address.Entity = value;
					if ((value != null))
					{
						value.Users.Add(this);
						this._AddressId = value.AddressId;
					}
					else
					{
						this._AddressId = default(int);
					}
					this.SendPropertyChanged("Address");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_TransactionDetails(TransactionDetail entity)
		{
			this.SendPropertyChanging();
			entity.User = this;
		}
		
		private void detach_TransactionDetails(TransactionDetail entity)
		{
			this.SendPropertyChanging();
			entity.User = null;
		}
		
		private void attach_UserGroupAssociations(UserGroupAssociation entity)
		{
			this.SendPropertyChanging();
			entity.User = this;
		}
		
		private void detach_UserGroupAssociations(UserGroupAssociation entity)
		{
			this.SendPropertyChanging();
			entity.User = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Account")]
	public partial class Account : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _AccountId;
		
		private int _StudentId;
		
		private System.Nullable<int> _CarryFarwordFee;
		
		private System.Nullable<int> _FeePaid;
		
		private System.Nullable<int> _Discount;
		
		private int _AcademicYearId;
		
		private int _ClassId;
		
		private int _MediumId;
		
		private EntitySet<TransactionDetail> _TransactionDetails;
		
		private EntityRef<AcademicYear> _AcademicYear;
		
		private EntityRef<Class> _Class;
		
		private EntityRef<Medium> _Medium;
		
		private EntityRef<Student> _Student;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnAccountIdChanging(int value);
    partial void OnAccountIdChanged();
    partial void OnStudentIdChanging(int value);
    partial void OnStudentIdChanged();
    partial void OnCarryFarwordFeeChanging(System.Nullable<int> value);
    partial void OnCarryFarwordFeeChanged();
    partial void OnFeePaidChanging(System.Nullable<int> value);
    partial void OnFeePaidChanged();
    partial void OnDiscountChanging(System.Nullable<int> value);
    partial void OnDiscountChanged();
    partial void OnAcademicYearIdChanging(int value);
    partial void OnAcademicYearIdChanged();
    partial void OnClassIdChanging(int value);
    partial void OnClassIdChanged();
    partial void OnMediumIdChanging(int value);
    partial void OnMediumIdChanged();
    #endregion
		
		public Account()
		{
			this._TransactionDetails = new EntitySet<TransactionDetail>(new Action<TransactionDetail>(this.attach_TransactionDetails), new Action<TransactionDetail>(this.detach_TransactionDetails));
			this._AcademicYear = default(EntityRef<AcademicYear>);
			this._Class = default(EntityRef<Class>);
			this._Medium = default(EntityRef<Medium>);
			this._Student = default(EntityRef<Student>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_AccountId", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int AccountId
		{
			get
			{
				return this._AccountId;
			}
			set
			{
				if ((this._AccountId != value))
				{
					this.OnAccountIdChanging(value);
					this.SendPropertyChanging();
					this._AccountId = value;
					this.SendPropertyChanged("AccountId");
					this.OnAccountIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_StudentId", DbType="Int NOT NULL")]
		public int StudentId
		{
			get
			{
				return this._StudentId;
			}
			set
			{
				if ((this._StudentId != value))
				{
					if (this._Student.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnStudentIdChanging(value);
					this.SendPropertyChanging();
					this._StudentId = value;
					this.SendPropertyChanged("StudentId");
					this.OnStudentIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CarryFarwordFee", DbType="Int")]
		public System.Nullable<int> CarryFarwordFee
		{
			get
			{
				return this._CarryFarwordFee;
			}
			set
			{
				if ((this._CarryFarwordFee != value))
				{
					this.OnCarryFarwordFeeChanging(value);
					this.SendPropertyChanging();
					this._CarryFarwordFee = value;
					this.SendPropertyChanged("CarryFarwordFee");
					this.OnCarryFarwordFeeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_FeePaid", DbType="Int")]
		public System.Nullable<int> FeePaid
		{
			get
			{
				return this._FeePaid;
			}
			set
			{
				if ((this._FeePaid != value))
				{
					this.OnFeePaidChanging(value);
					this.SendPropertyChanging();
					this._FeePaid = value;
					this.SendPropertyChanged("FeePaid");
					this.OnFeePaidChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Discount", DbType="Int")]
		public System.Nullable<int> Discount
		{
			get
			{
				return this._Discount;
			}
			set
			{
				if ((this._Discount != value))
				{
					this.OnDiscountChanging(value);
					this.SendPropertyChanging();
					this._Discount = value;
					this.SendPropertyChanged("Discount");
					this.OnDiscountChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_AcademicYearId", DbType="Int NOT NULL")]
		public int AcademicYearId
		{
			get
			{
				return this._AcademicYearId;
			}
			set
			{
				if ((this._AcademicYearId != value))
				{
					if (this._AcademicYear.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnAcademicYearIdChanging(value);
					this.SendPropertyChanging();
					this._AcademicYearId = value;
					this.SendPropertyChanged("AcademicYearId");
					this.OnAcademicYearIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ClassId", DbType="Int NOT NULL")]
		public int ClassId
		{
			get
			{
				return this._ClassId;
			}
			set
			{
				if ((this._ClassId != value))
				{
					if (this._Class.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnClassIdChanging(value);
					this.SendPropertyChanging();
					this._ClassId = value;
					this.SendPropertyChanged("ClassId");
					this.OnClassIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_MediumId", DbType="Int NOT NULL")]
		public int MediumId
		{
			get
			{
				return this._MediumId;
			}
			set
			{
				if ((this._MediumId != value))
				{
					if (this._Medium.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnMediumIdChanging(value);
					this.SendPropertyChanging();
					this._MediumId = value;
					this.SendPropertyChanged("MediumId");
					this.OnMediumIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Account_TransactionDetail", Storage="_TransactionDetails", ThisKey="AccountId", OtherKey="AccountId")]
		public EntitySet<TransactionDetail> TransactionDetails
		{
			get
			{
				return this._TransactionDetails;
			}
			set
			{
				this._TransactionDetails.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="AcademicYear_Account", Storage="_AcademicYear", ThisKey="AcademicYearId", OtherKey="AcademicYearId", IsForeignKey=true)]
		public AcademicYear AcademicYear
		{
			get
			{
				return this._AcademicYear.Entity;
			}
			set
			{
				AcademicYear previousValue = this._AcademicYear.Entity;
				if (((previousValue != value) 
							|| (this._AcademicYear.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._AcademicYear.Entity = null;
						previousValue.Accounts.Remove(this);
					}
					this._AcademicYear.Entity = value;
					if ((value != null))
					{
						value.Accounts.Add(this);
						this._AcademicYearId = value.AcademicYearId;
					}
					else
					{
						this._AcademicYearId = default(int);
					}
					this.SendPropertyChanged("AcademicYear");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Class_Account", Storage="_Class", ThisKey="ClassId", OtherKey="ClassId", IsForeignKey=true)]
		public Class Class
		{
			get
			{
				return this._Class.Entity;
			}
			set
			{
				Class previousValue = this._Class.Entity;
				if (((previousValue != value) 
							|| (this._Class.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Class.Entity = null;
						previousValue.Accounts.Remove(this);
					}
					this._Class.Entity = value;
					if ((value != null))
					{
						value.Accounts.Add(this);
						this._ClassId = value.ClassId;
					}
					else
					{
						this._ClassId = default(int);
					}
					this.SendPropertyChanged("Class");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Medium_Account", Storage="_Medium", ThisKey="MediumId", OtherKey="MediumId", IsForeignKey=true)]
		public Medium Medium
		{
			get
			{
				return this._Medium.Entity;
			}
			set
			{
				Medium previousValue = this._Medium.Entity;
				if (((previousValue != value) 
							|| (this._Medium.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Medium.Entity = null;
						previousValue.Accounts.Remove(this);
					}
					this._Medium.Entity = value;
					if ((value != null))
					{
						value.Accounts.Add(this);
						this._MediumId = value.MediumId;
					}
					else
					{
						this._MediumId = default(int);
					}
					this.SendPropertyChanged("Medium");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Student_Account", Storage="_Student", ThisKey="StudentId", OtherKey="StudentId", IsForeignKey=true)]
		public Student Student
		{
			get
			{
				return this._Student.Entity;
			}
			set
			{
				Student previousValue = this._Student.Entity;
				if (((previousValue != value) 
							|| (this._Student.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Student.Entity = null;
						previousValue.Accounts.Remove(this);
					}
					this._Student.Entity = value;
					if ((value != null))
					{
						value.Accounts.Add(this);
						this._StudentId = value.StudentId;
					}
					else
					{
						this._StudentId = default(int);
					}
					this.SendPropertyChanged("Student");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_TransactionDetails(TransactionDetail entity)
		{
			this.SendPropertyChanging();
			entity.Account = this;
		}
		
		private void detach_TransactionDetails(TransactionDetail entity)
		{
			this.SendPropertyChanging();
			entity.Account = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Address")]
	public partial class Address : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _AddressId;
		
		private string _AdrressLineOne;
		
		private string _Village;
		
		private string _District;
		
		private string _Pincode;
		
		private EntitySet<User> _Users;
		
		private EntitySet<Student> _Students;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnAddressIdChanging(int value);
    partial void OnAddressIdChanged();
    partial void OnAdrressLineOneChanging(string value);
    partial void OnAdrressLineOneChanged();
    partial void OnVillageChanging(string value);
    partial void OnVillageChanged();
    partial void OnDistrictChanging(string value);
    partial void OnDistrictChanged();
    partial void OnPincodeChanging(string value);
    partial void OnPincodeChanged();
    #endregion
		
		public Address()
		{
			this._Users = new EntitySet<User>(new Action<User>(this.attach_Users), new Action<User>(this.detach_Users));
			this._Students = new EntitySet<Student>(new Action<Student>(this.attach_Students), new Action<Student>(this.detach_Students));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_AddressId", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int AddressId
		{
			get
			{
				return this._AddressId;
			}
			set
			{
				if ((this._AddressId != value))
				{
					this.OnAddressIdChanging(value);
					this.SendPropertyChanging();
					this._AddressId = value;
					this.SendPropertyChanged("AddressId");
					this.OnAddressIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_AdrressLineOne", DbType="NVarChar(MAX)")]
		public string AdrressLineOne
		{
			get
			{
				return this._AdrressLineOne;
			}
			set
			{
				if ((this._AdrressLineOne != value))
				{
					this.OnAdrressLineOneChanging(value);
					this.SendPropertyChanging();
					this._AdrressLineOne = value;
					this.SendPropertyChanged("AdrressLineOne");
					this.OnAdrressLineOneChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Village", DbType="NVarChar(50)")]
		public string Village
		{
			get
			{
				return this._Village;
			}
			set
			{
				if ((this._Village != value))
				{
					this.OnVillageChanging(value);
					this.SendPropertyChanging();
					this._Village = value;
					this.SendPropertyChanged("Village");
					this.OnVillageChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_District", DbType="NVarChar(50)")]
		public string District
		{
			get
			{
				return this._District;
			}
			set
			{
				if ((this._District != value))
				{
					this.OnDistrictChanging(value);
					this.SendPropertyChanging();
					this._District = value;
					this.SendPropertyChanged("District");
					this.OnDistrictChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Pincode", DbType="NChar(10)")]
		public string Pincode
		{
			get
			{
				return this._Pincode;
			}
			set
			{
				if ((this._Pincode != value))
				{
					this.OnPincodeChanging(value);
					this.SendPropertyChanging();
					this._Pincode = value;
					this.SendPropertyChanged("Pincode");
					this.OnPincodeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Address_User", Storage="_Users", ThisKey="AddressId", OtherKey="AddressId")]
		public EntitySet<User> Users
		{
			get
			{
				return this._Users;
			}
			set
			{
				this._Users.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Address_Student", Storage="_Students", ThisKey="AddressId", OtherKey="AddressId")]
		public EntitySet<Student> Students
		{
			get
			{
				return this._Students;
			}
			set
			{
				this._Students.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Users(User entity)
		{
			this.SendPropertyChanging();
			entity.Address = this;
		}
		
		private void detach_Users(User entity)
		{
			this.SendPropertyChanging();
			entity.Address = null;
		}
		
		private void attach_Students(Student entity)
		{
			this.SendPropertyChanging();
			entity.Address = this;
		}
		
		private void detach_Students(Student entity)
		{
			this.SendPropertyChanging();
			entity.Address = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Cast")]
	public partial class Cast : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _CastId;
		
		private string _CastName;
		
		private EntitySet<Student> _Students;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnCastIdChanging(int value);
    partial void OnCastIdChanged();
    partial void OnCastNameChanging(string value);
    partial void OnCastNameChanged();
    #endregion
		
		public Cast()
		{
			this._Students = new EntitySet<Student>(new Action<Student>(this.attach_Students), new Action<Student>(this.detach_Students));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CastId", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int CastId
		{
			get
			{
				return this._CastId;
			}
			set
			{
				if ((this._CastId != value))
				{
					this.OnCastIdChanging(value);
					this.SendPropertyChanging();
					this._CastId = value;
					this.SendPropertyChanged("CastId");
					this.OnCastIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CastName", DbType="NVarChar(50)")]
		public string CastName
		{
			get
			{
				return this._CastName;
			}
			set
			{
				if ((this._CastName != value))
				{
					this.OnCastNameChanging(value);
					this.SendPropertyChanging();
					this._CastName = value;
					this.SendPropertyChanged("CastName");
					this.OnCastNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Cast_Student", Storage="_Students", ThisKey="CastId", OtherKey="CastId")]
		public EntitySet<Student> Students
		{
			get
			{
				return this._Students;
			}
			set
			{
				this._Students.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Students(Student entity)
		{
			this.SendPropertyChanging();
			entity.Cast = this;
		}
		
		private void detach_Students(Student entity)
		{
			this.SendPropertyChanging();
			entity.Cast = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Class")]
	public partial class Class : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _ClassId;
		
		private string _ClassName;
		
		private EntitySet<Account> _Accounts;
		
		private EntitySet<FeeMaster> _FeeMasters;
		
		private EntitySet<Student> _Students;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnClassIdChanging(int value);
    partial void OnClassIdChanged();
    partial void OnClassNameChanging(string value);
    partial void OnClassNameChanged();
    #endregion
		
		public Class()
		{
			this._Accounts = new EntitySet<Account>(new Action<Account>(this.attach_Accounts), new Action<Account>(this.detach_Accounts));
			this._FeeMasters = new EntitySet<FeeMaster>(new Action<FeeMaster>(this.attach_FeeMasters), new Action<FeeMaster>(this.detach_FeeMasters));
			this._Students = new EntitySet<Student>(new Action<Student>(this.attach_Students), new Action<Student>(this.detach_Students));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ClassId", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int ClassId
		{
			get
			{
				return this._ClassId;
			}
			set
			{
				if ((this._ClassId != value))
				{
					this.OnClassIdChanging(value);
					this.SendPropertyChanging();
					this._ClassId = value;
					this.SendPropertyChanged("ClassId");
					this.OnClassIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ClassName", DbType="NVarChar(50)")]
		public string ClassName
		{
			get
			{
				return this._ClassName;
			}
			set
			{
				if ((this._ClassName != value))
				{
					this.OnClassNameChanging(value);
					this.SendPropertyChanging();
					this._ClassName = value;
					this.SendPropertyChanged("ClassName");
					this.OnClassNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Class_Account", Storage="_Accounts", ThisKey="ClassId", OtherKey="ClassId")]
		public EntitySet<Account> Accounts
		{
			get
			{
				return this._Accounts;
			}
			set
			{
				this._Accounts.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Class_FeeMaster", Storage="_FeeMasters", ThisKey="ClassId", OtherKey="ClassId")]
		public EntitySet<FeeMaster> FeeMasters
		{
			get
			{
				return this._FeeMasters;
			}
			set
			{
				this._FeeMasters.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Class_Student", Storage="_Students", ThisKey="ClassId", OtherKey="Class")]
		public EntitySet<Student> Students
		{
			get
			{
				return this._Students;
			}
			set
			{
				this._Students.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Accounts(Account entity)
		{
			this.SendPropertyChanging();
			entity.Class = this;
		}
		
		private void detach_Accounts(Account entity)
		{
			this.SendPropertyChanging();
			entity.Class = null;
		}
		
		private void attach_FeeMasters(FeeMaster entity)
		{
			this.SendPropertyChanging();
			entity.Class = this;
		}
		
		private void detach_FeeMasters(FeeMaster entity)
		{
			this.SendPropertyChanging();
			entity.Class = null;
		}
		
		private void attach_Students(Student entity)
		{
			this.SendPropertyChanging();
			entity.Class1 = this;
		}
		
		private void detach_Students(Student entity)
		{
			this.SendPropertyChanging();
			entity.Class1 = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.ExamSubjectMarks")]
	public partial class ExamSubjectMark : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _Id;
		
		private int _StudentId;
		
		private int _ExamTypeId;
		
		private int _SubjectId;
		
		private System.Nullable<int> _MarksObtained;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIdChanging(int value);
    partial void OnIdChanged();
    partial void OnStudentIdChanging(int value);
    partial void OnStudentIdChanged();
    partial void OnExamTypeIdChanging(int value);
    partial void OnExamTypeIdChanged();
    partial void OnSubjectIdChanging(int value);
    partial void OnSubjectIdChanged();
    partial void OnMarksObtainedChanging(System.Nullable<int> value);
    partial void OnMarksObtainedChanged();
    #endregion
		
		public ExamSubjectMark()
		{
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Id", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int Id
		{
			get
			{
				return this._Id;
			}
			set
			{
				if ((this._Id != value))
				{
					this.OnIdChanging(value);
					this.SendPropertyChanging();
					this._Id = value;
					this.SendPropertyChanged("Id");
					this.OnIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_StudentId", DbType="Int NOT NULL")]
		public int StudentId
		{
			get
			{
				return this._StudentId;
			}
			set
			{
				if ((this._StudentId != value))
				{
					this.OnStudentIdChanging(value);
					this.SendPropertyChanging();
					this._StudentId = value;
					this.SendPropertyChanged("StudentId");
					this.OnStudentIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ExamTypeId", DbType="Int NOT NULL")]
		public int ExamTypeId
		{
			get
			{
				return this._ExamTypeId;
			}
			set
			{
				if ((this._ExamTypeId != value))
				{
					this.OnExamTypeIdChanging(value);
					this.SendPropertyChanging();
					this._ExamTypeId = value;
					this.SendPropertyChanged("ExamTypeId");
					this.OnExamTypeIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_SubjectId", DbType="Int NOT NULL")]
		public int SubjectId
		{
			get
			{
				return this._SubjectId;
			}
			set
			{
				if ((this._SubjectId != value))
				{
					this.OnSubjectIdChanging(value);
					this.SendPropertyChanging();
					this._SubjectId = value;
					this.SendPropertyChanged("SubjectId");
					this.OnSubjectIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_MarksObtained", DbType="Int")]
		public System.Nullable<int> MarksObtained
		{
			get
			{
				return this._MarksObtained;
			}
			set
			{
				if ((this._MarksObtained != value))
				{
					this.OnMarksObtainedChanging(value);
					this.SendPropertyChanging();
					this._MarksObtained = value;
					this.SendPropertyChanged("MarksObtained");
					this.OnMarksObtainedChanged();
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.ExamType")]
	public partial class ExamType : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _ExamTypeId;
		
		private string _ExamName;
		
		private int _PerSubjectMarks;
		
		private int _PassingMarksPerSubject;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnExamTypeIdChanging(int value);
    partial void OnExamTypeIdChanged();
    partial void OnExamNameChanging(string value);
    partial void OnExamNameChanged();
    partial void OnPerSubjectMarksChanging(int value);
    partial void OnPerSubjectMarksChanged();
    partial void OnPassingMarksPerSubjectChanging(int value);
    partial void OnPassingMarksPerSubjectChanged();
    #endregion
		
		public ExamType()
		{
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ExamTypeId", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int ExamTypeId
		{
			get
			{
				return this._ExamTypeId;
			}
			set
			{
				if ((this._ExamTypeId != value))
				{
					this.OnExamTypeIdChanging(value);
					this.SendPropertyChanging();
					this._ExamTypeId = value;
					this.SendPropertyChanged("ExamTypeId");
					this.OnExamTypeIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ExamName", DbType="NVarChar(50) NOT NULL", CanBeNull=false)]
		public string ExamName
		{
			get
			{
				return this._ExamName;
			}
			set
			{
				if ((this._ExamName != value))
				{
					this.OnExamNameChanging(value);
					this.SendPropertyChanging();
					this._ExamName = value;
					this.SendPropertyChanged("ExamName");
					this.OnExamNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_PerSubjectMarks", DbType="Int NOT NULL")]
		public int PerSubjectMarks
		{
			get
			{
				return this._PerSubjectMarks;
			}
			set
			{
				if ((this._PerSubjectMarks != value))
				{
					this.OnPerSubjectMarksChanging(value);
					this.SendPropertyChanging();
					this._PerSubjectMarks = value;
					this.SendPropertyChanged("PerSubjectMarks");
					this.OnPerSubjectMarksChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_PassingMarksPerSubject", DbType="Int NOT NULL")]
		public int PassingMarksPerSubject
		{
			get
			{
				return this._PassingMarksPerSubject;
			}
			set
			{
				if ((this._PassingMarksPerSubject != value))
				{
					this.OnPassingMarksPerSubjectChanging(value);
					this.SendPropertyChanging();
					this._PassingMarksPerSubject = value;
					this.SendPropertyChanged("PassingMarksPerSubject");
					this.OnPassingMarksPerSubjectChanged();
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.FeeMaster")]
	public partial class FeeMaster : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _Id;
		
		private int _MediumId;
		
		private int _ClassId;
		
		private int _Fee;
		
		private int _AcademicYearId;
		
		private EntityRef<AcademicYear> _AcademicYear;
		
		private EntityRef<Class> _Class;
		
		private EntityRef<Medium> _Medium;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIdChanging(int value);
    partial void OnIdChanged();
    partial void OnMediumIdChanging(int value);
    partial void OnMediumIdChanged();
    partial void OnClassIdChanging(int value);
    partial void OnClassIdChanged();
    partial void OnFeeChanging(int value);
    partial void OnFeeChanged();
    partial void OnAcademicYearIdChanging(int value);
    partial void OnAcademicYearIdChanged();
    #endregion
		
		public FeeMaster()
		{
			this._AcademicYear = default(EntityRef<AcademicYear>);
			this._Class = default(EntityRef<Class>);
			this._Medium = default(EntityRef<Medium>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Id", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int Id
		{
			get
			{
				return this._Id;
			}
			set
			{
				if ((this._Id != value))
				{
					this.OnIdChanging(value);
					this.SendPropertyChanging();
					this._Id = value;
					this.SendPropertyChanged("Id");
					this.OnIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_MediumId", DbType="Int NOT NULL")]
		public int MediumId
		{
			get
			{
				return this._MediumId;
			}
			set
			{
				if ((this._MediumId != value))
				{
					if (this._Medium.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnMediumIdChanging(value);
					this.SendPropertyChanging();
					this._MediumId = value;
					this.SendPropertyChanged("MediumId");
					this.OnMediumIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ClassId", DbType="Int NOT NULL")]
		public int ClassId
		{
			get
			{
				return this._ClassId;
			}
			set
			{
				if ((this._ClassId != value))
				{
					if (this._Class.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnClassIdChanging(value);
					this.SendPropertyChanging();
					this._ClassId = value;
					this.SendPropertyChanged("ClassId");
					this.OnClassIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Fee", DbType="Int NOT NULL")]
		public int Fee
		{
			get
			{
				return this._Fee;
			}
			set
			{
				if ((this._Fee != value))
				{
					this.OnFeeChanging(value);
					this.SendPropertyChanging();
					this._Fee = value;
					this.SendPropertyChanged("Fee");
					this.OnFeeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_AcademicYearId", DbType="Int NOT NULL")]
		public int AcademicYearId
		{
			get
			{
				return this._AcademicYearId;
			}
			set
			{
				if ((this._AcademicYearId != value))
				{
					if (this._AcademicYear.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnAcademicYearIdChanging(value);
					this.SendPropertyChanging();
					this._AcademicYearId = value;
					this.SendPropertyChanged("AcademicYearId");
					this.OnAcademicYearIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="AcademicYear_FeeMaster", Storage="_AcademicYear", ThisKey="AcademicYearId", OtherKey="AcademicYearId", IsForeignKey=true)]
		public AcademicYear AcademicYear
		{
			get
			{
				return this._AcademicYear.Entity;
			}
			set
			{
				AcademicYear previousValue = this._AcademicYear.Entity;
				if (((previousValue != value) 
							|| (this._AcademicYear.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._AcademicYear.Entity = null;
						previousValue.FeeMasters.Remove(this);
					}
					this._AcademicYear.Entity = value;
					if ((value != null))
					{
						value.FeeMasters.Add(this);
						this._AcademicYearId = value.AcademicYearId;
					}
					else
					{
						this._AcademicYearId = default(int);
					}
					this.SendPropertyChanged("AcademicYear");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Class_FeeMaster", Storage="_Class", ThisKey="ClassId", OtherKey="ClassId", IsForeignKey=true)]
		public Class Class
		{
			get
			{
				return this._Class.Entity;
			}
			set
			{
				Class previousValue = this._Class.Entity;
				if (((previousValue != value) 
							|| (this._Class.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Class.Entity = null;
						previousValue.FeeMasters.Remove(this);
					}
					this._Class.Entity = value;
					if ((value != null))
					{
						value.FeeMasters.Add(this);
						this._ClassId = value.ClassId;
					}
					else
					{
						this._ClassId = default(int);
					}
					this.SendPropertyChanged("Class");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Medium_FeeMaster", Storage="_Medium", ThisKey="MediumId", OtherKey="MediumId", IsForeignKey=true)]
		public Medium Medium
		{
			get
			{
				return this._Medium.Entity;
			}
			set
			{
				Medium previousValue = this._Medium.Entity;
				if (((previousValue != value) 
							|| (this._Medium.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Medium.Entity = null;
						previousValue.FeeMasters.Remove(this);
					}
					this._Medium.Entity = value;
					if ((value != null))
					{
						value.FeeMasters.Add(this);
						this._MediumId = value.MediumId;
					}
					else
					{
						this._MediumId = default(int);
					}
					this.SendPropertyChanged("Medium");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.[Group]")]
	public partial class Group : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _GroupId;
		
		private string _GroupCode;
		
		private string _GroupDescription;
		
		private EntitySet<UserGroupAssociation> _UserGroupAssociations;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnGroupIdChanging(int value);
    partial void OnGroupIdChanged();
    partial void OnGroupCodeChanging(string value);
    partial void OnGroupCodeChanged();
    partial void OnGroupDescriptionChanging(string value);
    partial void OnGroupDescriptionChanged();
    #endregion
		
		public Group()
		{
			this._UserGroupAssociations = new EntitySet<UserGroupAssociation>(new Action<UserGroupAssociation>(this.attach_UserGroupAssociations), new Action<UserGroupAssociation>(this.detach_UserGroupAssociations));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_GroupId", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int GroupId
		{
			get
			{
				return this._GroupId;
			}
			set
			{
				if ((this._GroupId != value))
				{
					this.OnGroupIdChanging(value);
					this.SendPropertyChanging();
					this._GroupId = value;
					this.SendPropertyChanged("GroupId");
					this.OnGroupIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_GroupCode", DbType="NVarChar(50) NOT NULL", CanBeNull=false)]
		public string GroupCode
		{
			get
			{
				return this._GroupCode;
			}
			set
			{
				if ((this._GroupCode != value))
				{
					this.OnGroupCodeChanging(value);
					this.SendPropertyChanging();
					this._GroupCode = value;
					this.SendPropertyChanged("GroupCode");
					this.OnGroupCodeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_GroupDescription", DbType="NVarChar(50) NOT NULL", CanBeNull=false)]
		public string GroupDescription
		{
			get
			{
				return this._GroupDescription;
			}
			set
			{
				if ((this._GroupDescription != value))
				{
					this.OnGroupDescriptionChanging(value);
					this.SendPropertyChanging();
					this._GroupDescription = value;
					this.SendPropertyChanged("GroupDescription");
					this.OnGroupDescriptionChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Group_UserGroupAssociation", Storage="_UserGroupAssociations", ThisKey="GroupId", OtherKey="GroupId")]
		public EntitySet<UserGroupAssociation> UserGroupAssociations
		{
			get
			{
				return this._UserGroupAssociations;
			}
			set
			{
				this._UserGroupAssociations.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_UserGroupAssociations(UserGroupAssociation entity)
		{
			this.SendPropertyChanging();
			entity.Group = this;
		}
		
		private void detach_UserGroupAssociations(UserGroupAssociation entity)
		{
			this.SendPropertyChanging();
			entity.Group = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Medium")]
	public partial class Medium : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _MediumId;
		
		private string _MediumName;
		
		private EntitySet<Account> _Accounts;
		
		private EntitySet<FeeMaster> _FeeMasters;
		
		private EntitySet<Student> _Students;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnMediumIdChanging(int value);
    partial void OnMediumIdChanged();
    partial void OnMediumNameChanging(string value);
    partial void OnMediumNameChanged();
    #endregion
		
		public Medium()
		{
			this._Accounts = new EntitySet<Account>(new Action<Account>(this.attach_Accounts), new Action<Account>(this.detach_Accounts));
			this._FeeMasters = new EntitySet<FeeMaster>(new Action<FeeMaster>(this.attach_FeeMasters), new Action<FeeMaster>(this.detach_FeeMasters));
			this._Students = new EntitySet<Student>(new Action<Student>(this.attach_Students), new Action<Student>(this.detach_Students));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_MediumId", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int MediumId
		{
			get
			{
				return this._MediumId;
			}
			set
			{
				if ((this._MediumId != value))
				{
					this.OnMediumIdChanging(value);
					this.SendPropertyChanging();
					this._MediumId = value;
					this.SendPropertyChanged("MediumId");
					this.OnMediumIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_MediumName", DbType="NVarChar(50) NOT NULL", CanBeNull=false)]
		public string MediumName
		{
			get
			{
				return this._MediumName;
			}
			set
			{
				if ((this._MediumName != value))
				{
					this.OnMediumNameChanging(value);
					this.SendPropertyChanging();
					this._MediumName = value;
					this.SendPropertyChanged("MediumName");
					this.OnMediumNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Medium_Account", Storage="_Accounts", ThisKey="MediumId", OtherKey="MediumId")]
		public EntitySet<Account> Accounts
		{
			get
			{
				return this._Accounts;
			}
			set
			{
				this._Accounts.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Medium_FeeMaster", Storage="_FeeMasters", ThisKey="MediumId", OtherKey="MediumId")]
		public EntitySet<FeeMaster> FeeMasters
		{
			get
			{
				return this._FeeMasters;
			}
			set
			{
				this._FeeMasters.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Medium_Student", Storage="_Students", ThisKey="MediumId", OtherKey="MediumId")]
		public EntitySet<Student> Students
		{
			get
			{
				return this._Students;
			}
			set
			{
				this._Students.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Accounts(Account entity)
		{
			this.SendPropertyChanging();
			entity.Medium = this;
		}
		
		private void detach_Accounts(Account entity)
		{
			this.SendPropertyChanging();
			entity.Medium = null;
		}
		
		private void attach_FeeMasters(FeeMaster entity)
		{
			this.SendPropertyChanging();
			entity.Medium = this;
		}
		
		private void detach_FeeMasters(FeeMaster entity)
		{
			this.SendPropertyChanging();
			entity.Medium = null;
		}
		
		private void attach_Students(Student entity)
		{
			this.SendPropertyChanging();
			entity.Medium = this;
		}
		
		private void detach_Students(Student entity)
		{
			this.SendPropertyChanging();
			entity.Medium = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.ScholarShip")]
	public partial class ScholarShip : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _ScholarShipId;
		
		private string _ScholarShipName;
		
		private EntitySet<ScholarShipDetail> _ScholarShipDetails;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnScholarShipIdChanging(int value);
    partial void OnScholarShipIdChanged();
    partial void OnScholarShipNameChanging(string value);
    partial void OnScholarShipNameChanged();
    #endregion
		
		public ScholarShip()
		{
			this._ScholarShipDetails = new EntitySet<ScholarShipDetail>(new Action<ScholarShipDetail>(this.attach_ScholarShipDetails), new Action<ScholarShipDetail>(this.detach_ScholarShipDetails));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ScholarShipId", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int ScholarShipId
		{
			get
			{
				return this._ScholarShipId;
			}
			set
			{
				if ((this._ScholarShipId != value))
				{
					this.OnScholarShipIdChanging(value);
					this.SendPropertyChanging();
					this._ScholarShipId = value;
					this.SendPropertyChanged("ScholarShipId");
					this.OnScholarShipIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ScholarShipName", DbType="NVarChar(50)")]
		public string ScholarShipName
		{
			get
			{
				return this._ScholarShipName;
			}
			set
			{
				if ((this._ScholarShipName != value))
				{
					this.OnScholarShipNameChanging(value);
					this.SendPropertyChanging();
					this._ScholarShipName = value;
					this.SendPropertyChanged("ScholarShipName");
					this.OnScholarShipNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="ScholarShip_ScholarShipDetail", Storage="_ScholarShipDetails", ThisKey="ScholarShipId", OtherKey="ScholarShipTypeId")]
		public EntitySet<ScholarShipDetail> ScholarShipDetails
		{
			get
			{
				return this._ScholarShipDetails;
			}
			set
			{
				this._ScholarShipDetails.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_ScholarShipDetails(ScholarShipDetail entity)
		{
			this.SendPropertyChanging();
			entity.ScholarShip = this;
		}
		
		private void detach_ScholarShipDetails(ScholarShipDetail entity)
		{
			this.SendPropertyChanging();
			entity.ScholarShip = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.ScholarShipDetails")]
	public partial class ScholarShipDetail : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _ScholarShipDetailsId;
		
		private int _StudentId;
		
		private int _ScholarShipTypeId;
		
		private System.Nullable<int> _AmountSanctioned;
		
		private System.Nullable<System.DateTime> _DateSanctioned;
		
		private int _AcademicYearId;
		
		private int _UserId;
		
		private EntityRef<AcademicYear> _AcademicYear;
		
		private EntityRef<ScholarShip> _ScholarShip;
		
		private EntityRef<Student> _Student;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnScholarShipDetailsIdChanging(int value);
    partial void OnScholarShipDetailsIdChanged();
    partial void OnStudentIdChanging(int value);
    partial void OnStudentIdChanged();
    partial void OnScholarShipTypeIdChanging(int value);
    partial void OnScholarShipTypeIdChanged();
    partial void OnAmountSanctionedChanging(System.Nullable<int> value);
    partial void OnAmountSanctionedChanged();
    partial void OnDateSanctionedChanging(System.Nullable<System.DateTime> value);
    partial void OnDateSanctionedChanged();
    partial void OnAcademicYearIdChanging(int value);
    partial void OnAcademicYearIdChanged();
    partial void OnUserIdChanging(int value);
    partial void OnUserIdChanged();
    #endregion
		
		public ScholarShipDetail()
		{
			this._AcademicYear = default(EntityRef<AcademicYear>);
			this._ScholarShip = default(EntityRef<ScholarShip>);
			this._Student = default(EntityRef<Student>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ScholarShipDetailsId", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int ScholarShipDetailsId
		{
			get
			{
				return this._ScholarShipDetailsId;
			}
			set
			{
				if ((this._ScholarShipDetailsId != value))
				{
					this.OnScholarShipDetailsIdChanging(value);
					this.SendPropertyChanging();
					this._ScholarShipDetailsId = value;
					this.SendPropertyChanged("ScholarShipDetailsId");
					this.OnScholarShipDetailsIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_StudentId", DbType="Int NOT NULL")]
		public int StudentId
		{
			get
			{
				return this._StudentId;
			}
			set
			{
				if ((this._StudentId != value))
				{
					if (this._Student.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnStudentIdChanging(value);
					this.SendPropertyChanging();
					this._StudentId = value;
					this.SendPropertyChanged("StudentId");
					this.OnStudentIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ScholarShipTypeId", DbType="Int NOT NULL")]
		public int ScholarShipTypeId
		{
			get
			{
				return this._ScholarShipTypeId;
			}
			set
			{
				if ((this._ScholarShipTypeId != value))
				{
					if (this._ScholarShip.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnScholarShipTypeIdChanging(value);
					this.SendPropertyChanging();
					this._ScholarShipTypeId = value;
					this.SendPropertyChanged("ScholarShipTypeId");
					this.OnScholarShipTypeIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_AmountSanctioned", DbType="Int")]
		public System.Nullable<int> AmountSanctioned
		{
			get
			{
				return this._AmountSanctioned;
			}
			set
			{
				if ((this._AmountSanctioned != value))
				{
					this.OnAmountSanctionedChanging(value);
					this.SendPropertyChanging();
					this._AmountSanctioned = value;
					this.SendPropertyChanged("AmountSanctioned");
					this.OnAmountSanctionedChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_DateSanctioned", DbType="DateTime")]
		public System.Nullable<System.DateTime> DateSanctioned
		{
			get
			{
				return this._DateSanctioned;
			}
			set
			{
				if ((this._DateSanctioned != value))
				{
					this.OnDateSanctionedChanging(value);
					this.SendPropertyChanging();
					this._DateSanctioned = value;
					this.SendPropertyChanged("DateSanctioned");
					this.OnDateSanctionedChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_AcademicYearId", DbType="Int NOT NULL")]
		public int AcademicYearId
		{
			get
			{
				return this._AcademicYearId;
			}
			set
			{
				if ((this._AcademicYearId != value))
				{
					if (this._AcademicYear.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnAcademicYearIdChanging(value);
					this.SendPropertyChanging();
					this._AcademicYearId = value;
					this.SendPropertyChanged("AcademicYearId");
					this.OnAcademicYearIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_UserId", DbType="Int NOT NULL")]
		public int UserId
		{
			get
			{
				return this._UserId;
			}
			set
			{
				if ((this._UserId != value))
				{
					this.OnUserIdChanging(value);
					this.SendPropertyChanging();
					this._UserId = value;
					this.SendPropertyChanged("UserId");
					this.OnUserIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="AcademicYear_ScholarShipDetail", Storage="_AcademicYear", ThisKey="AcademicYearId", OtherKey="AcademicYearId", IsForeignKey=true)]
		public AcademicYear AcademicYear
		{
			get
			{
				return this._AcademicYear.Entity;
			}
			set
			{
				AcademicYear previousValue = this._AcademicYear.Entity;
				if (((previousValue != value) 
							|| (this._AcademicYear.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._AcademicYear.Entity = null;
						previousValue.ScholarShipDetails.Remove(this);
					}
					this._AcademicYear.Entity = value;
					if ((value != null))
					{
						value.ScholarShipDetails.Add(this);
						this._AcademicYearId = value.AcademicYearId;
					}
					else
					{
						this._AcademicYearId = default(int);
					}
					this.SendPropertyChanged("AcademicYear");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="ScholarShip_ScholarShipDetail", Storage="_ScholarShip", ThisKey="ScholarShipTypeId", OtherKey="ScholarShipId", IsForeignKey=true)]
		public ScholarShip ScholarShip
		{
			get
			{
				return this._ScholarShip.Entity;
			}
			set
			{
				ScholarShip previousValue = this._ScholarShip.Entity;
				if (((previousValue != value) 
							|| (this._ScholarShip.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._ScholarShip.Entity = null;
						previousValue.ScholarShipDetails.Remove(this);
					}
					this._ScholarShip.Entity = value;
					if ((value != null))
					{
						value.ScholarShipDetails.Add(this);
						this._ScholarShipTypeId = value.ScholarShipId;
					}
					else
					{
						this._ScholarShipTypeId = default(int);
					}
					this.SendPropertyChanged("ScholarShip");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Student_ScholarShipDetail", Storage="_Student", ThisKey="StudentId", OtherKey="StudentId", IsForeignKey=true)]
		public Student Student
		{
			get
			{
				return this._Student.Entity;
			}
			set
			{
				Student previousValue = this._Student.Entity;
				if (((previousValue != value) 
							|| (this._Student.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Student.Entity = null;
						previousValue.ScholarShipDetails.Remove(this);
					}
					this._Student.Entity = value;
					if ((value != null))
					{
						value.ScholarShipDetails.Add(this);
						this._StudentId = value.StudentId;
					}
					else
					{
						this._StudentId = default(int);
					}
					this.SendPropertyChanged("Student");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Section")]
	public partial class Section : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _SectionId;
		
		private string _SectionName;
		
		private EntitySet<Student> _Students;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnSectionIdChanging(int value);
    partial void OnSectionIdChanged();
    partial void OnSectionNameChanging(string value);
    partial void OnSectionNameChanged();
    #endregion
		
		public Section()
		{
			this._Students = new EntitySet<Student>(new Action<Student>(this.attach_Students), new Action<Student>(this.detach_Students));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_SectionId", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int SectionId
		{
			get
			{
				return this._SectionId;
			}
			set
			{
				if ((this._SectionId != value))
				{
					this.OnSectionIdChanging(value);
					this.SendPropertyChanging();
					this._SectionId = value;
					this.SendPropertyChanged("SectionId");
					this.OnSectionIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_SectionName", DbType="NVarChar(50)")]
		public string SectionName
		{
			get
			{
				return this._SectionName;
			}
			set
			{
				if ((this._SectionName != value))
				{
					this.OnSectionNameChanging(value);
					this.SendPropertyChanging();
					this._SectionName = value;
					this.SendPropertyChanged("SectionName");
					this.OnSectionNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Section_Student", Storage="_Students", ThisKey="SectionId", OtherKey="SectionId")]
		public EntitySet<Student> Students
		{
			get
			{
				return this._Students;
			}
			set
			{
				this._Students.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Students(Student entity)
		{
			this.SendPropertyChanging();
			entity.Section = this;
		}
		
		private void detach_Students(Student entity)
		{
			this.SendPropertyChanging();
			entity.Section = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Student")]
	public partial class Student : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _StudentId;
		
		private System.Nullable<int> _Age;
		
		private string _Gender;
		
		private int _Class;
		
		private int _AddressId;
		
		private int _CastId;
		
		private string _FatherName;
		
		private string _MotherName;
		
		private string _StudentName;
		
		private int _MediumId;
		
		private int _SectionId;
		
		private bool _IsDeleted;
		
		private EntitySet<Account> _Accounts;
		
		private EntitySet<ScholarShipDetail> _ScholarShipDetails;
		
		private EntitySet<TransactionDetail> _TransactionDetails;
		
		private EntityRef<Address> _Address;
		
		private EntityRef<Cast> _Cast;
		
		private EntityRef<Class> _Class1;
		
		private EntityRef<Medium> _Medium;
		
		private EntityRef<Section> _Section;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnStudentIdChanging(int value);
    partial void OnStudentIdChanged();
    partial void OnAgeChanging(System.Nullable<int> value);
    partial void OnAgeChanged();
    partial void OnGenderChanging(string value);
    partial void OnGenderChanged();
    partial void OnClassChanging(int value);
    partial void OnClassChanged();
    partial void OnAddressIdChanging(int value);
    partial void OnAddressIdChanged();
    partial void OnCastIdChanging(int value);
    partial void OnCastIdChanged();
    partial void OnFatherNameChanging(string value);
    partial void OnFatherNameChanged();
    partial void OnMotherNameChanging(string value);
    partial void OnMotherNameChanged();
    partial void OnStudentNameChanging(string value);
    partial void OnStudentNameChanged();
    partial void OnMediumIdChanging(int value);
    partial void OnMediumIdChanged();
    partial void OnSectionIdChanging(int value);
    partial void OnSectionIdChanged();
    partial void OnIsDeletedChanging(bool value);
    partial void OnIsDeletedChanged();
    #endregion
		
		public Student()
		{
			this._Accounts = new EntitySet<Account>(new Action<Account>(this.attach_Accounts), new Action<Account>(this.detach_Accounts));
			this._ScholarShipDetails = new EntitySet<ScholarShipDetail>(new Action<ScholarShipDetail>(this.attach_ScholarShipDetails), new Action<ScholarShipDetail>(this.detach_ScholarShipDetails));
			this._TransactionDetails = new EntitySet<TransactionDetail>(new Action<TransactionDetail>(this.attach_TransactionDetails), new Action<TransactionDetail>(this.detach_TransactionDetails));
			this._Address = default(EntityRef<Address>);
			this._Cast = default(EntityRef<Cast>);
			this._Class1 = default(EntityRef<Class>);
			this._Medium = default(EntityRef<Medium>);
			this._Section = default(EntityRef<Section>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_StudentId", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int StudentId
		{
			get
			{
				return this._StudentId;
			}
			set
			{
				if ((this._StudentId != value))
				{
					this.OnStudentIdChanging(value);
					this.SendPropertyChanging();
					this._StudentId = value;
					this.SendPropertyChanged("StudentId");
					this.OnStudentIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Age", DbType="Int")]
		public System.Nullable<int> Age
		{
			get
			{
				return this._Age;
			}
			set
			{
				if ((this._Age != value))
				{
					this.OnAgeChanging(value);
					this.SendPropertyChanging();
					this._Age = value;
					this.SendPropertyChanged("Age");
					this.OnAgeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Gender", DbType="NChar(10)")]
		public string Gender
		{
			get
			{
				return this._Gender;
			}
			set
			{
				if ((this._Gender != value))
				{
					this.OnGenderChanging(value);
					this.SendPropertyChanging();
					this._Gender = value;
					this.SendPropertyChanged("Gender");
					this.OnGenderChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Class", DbType="Int NOT NULL")]
		public int Class
		{
			get
			{
				return this._Class;
			}
			set
			{
				if ((this._Class != value))
				{
					if (this._Class1.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnClassChanging(value);
					this.SendPropertyChanging();
					this._Class = value;
					this.SendPropertyChanged("Class");
					this.OnClassChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_AddressId", DbType="Int NOT NULL")]
		public int AddressId
		{
			get
			{
				return this._AddressId;
			}
			set
			{
				if ((this._AddressId != value))
				{
					if (this._Address.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnAddressIdChanging(value);
					this.SendPropertyChanging();
					this._AddressId = value;
					this.SendPropertyChanged("AddressId");
					this.OnAddressIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CastId", DbType="Int NOT NULL")]
		public int CastId
		{
			get
			{
				return this._CastId;
			}
			set
			{
				if ((this._CastId != value))
				{
					if (this._Cast.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnCastIdChanging(value);
					this.SendPropertyChanging();
					this._CastId = value;
					this.SendPropertyChanged("CastId");
					this.OnCastIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_FatherName", DbType="NVarChar(250) NOT NULL", CanBeNull=false)]
		public string FatherName
		{
			get
			{
				return this._FatherName;
			}
			set
			{
				if ((this._FatherName != value))
				{
					this.OnFatherNameChanging(value);
					this.SendPropertyChanging();
					this._FatherName = value;
					this.SendPropertyChanged("FatherName");
					this.OnFatherNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_MotherName", DbType="NVarChar(250) NOT NULL", CanBeNull=false)]
		public string MotherName
		{
			get
			{
				return this._MotherName;
			}
			set
			{
				if ((this._MotherName != value))
				{
					this.OnMotherNameChanging(value);
					this.SendPropertyChanging();
					this._MotherName = value;
					this.SendPropertyChanged("MotherName");
					this.OnMotherNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_StudentName", DbType="NVarChar(250) NOT NULL", CanBeNull=false)]
		public string StudentName
		{
			get
			{
				return this._StudentName;
			}
			set
			{
				if ((this._StudentName != value))
				{
					this.OnStudentNameChanging(value);
					this.SendPropertyChanging();
					this._StudentName = value;
					this.SendPropertyChanged("StudentName");
					this.OnStudentNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_MediumId", DbType="Int NOT NULL")]
		public int MediumId
		{
			get
			{
				return this._MediumId;
			}
			set
			{
				if ((this._MediumId != value))
				{
					if (this._Medium.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnMediumIdChanging(value);
					this.SendPropertyChanging();
					this._MediumId = value;
					this.SendPropertyChanged("MediumId");
					this.OnMediumIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_SectionId", DbType="Int NOT NULL")]
		public int SectionId
		{
			get
			{
				return this._SectionId;
			}
			set
			{
				if ((this._SectionId != value))
				{
					if (this._Section.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnSectionIdChanging(value);
					this.SendPropertyChanging();
					this._SectionId = value;
					this.SendPropertyChanged("SectionId");
					this.OnSectionIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_IsDeleted", DbType="Bit NOT NULL")]
		public bool IsDeleted
		{
			get
			{
				return this._IsDeleted;
			}
			set
			{
				if ((this._IsDeleted != value))
				{
					this.OnIsDeletedChanging(value);
					this.SendPropertyChanging();
					this._IsDeleted = value;
					this.SendPropertyChanged("IsDeleted");
					this.OnIsDeletedChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Student_Account", Storage="_Accounts", ThisKey="StudentId", OtherKey="StudentId")]
		public EntitySet<Account> Accounts
		{
			get
			{
				return this._Accounts;
			}
			set
			{
				this._Accounts.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Student_ScholarShipDetail", Storage="_ScholarShipDetails", ThisKey="StudentId", OtherKey="StudentId")]
		public EntitySet<ScholarShipDetail> ScholarShipDetails
		{
			get
			{
				return this._ScholarShipDetails;
			}
			set
			{
				this._ScholarShipDetails.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Student_TransactionDetail", Storage="_TransactionDetails", ThisKey="StudentId", OtherKey="StudentId")]
		public EntitySet<TransactionDetail> TransactionDetails
		{
			get
			{
				return this._TransactionDetails;
			}
			set
			{
				this._TransactionDetails.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Address_Student", Storage="_Address", ThisKey="AddressId", OtherKey="AddressId", IsForeignKey=true)]
		public Address Address
		{
			get
			{
				return this._Address.Entity;
			}
			set
			{
				Address previousValue = this._Address.Entity;
				if (((previousValue != value) 
							|| (this._Address.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Address.Entity = null;
						previousValue.Students.Remove(this);
					}
					this._Address.Entity = value;
					if ((value != null))
					{
						value.Students.Add(this);
						this._AddressId = value.AddressId;
					}
					else
					{
						this._AddressId = default(int);
					}
					this.SendPropertyChanged("Address");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Cast_Student", Storage="_Cast", ThisKey="CastId", OtherKey="CastId", IsForeignKey=true)]
		public Cast Cast
		{
			get
			{
				return this._Cast.Entity;
			}
			set
			{
				Cast previousValue = this._Cast.Entity;
				if (((previousValue != value) 
							|| (this._Cast.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Cast.Entity = null;
						previousValue.Students.Remove(this);
					}
					this._Cast.Entity = value;
					if ((value != null))
					{
						value.Students.Add(this);
						this._CastId = value.CastId;
					}
					else
					{
						this._CastId = default(int);
					}
					this.SendPropertyChanged("Cast");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Class_Student", Storage="_Class1", ThisKey="Class", OtherKey="ClassId", IsForeignKey=true)]
		public Class Class1
		{
			get
			{
				return this._Class1.Entity;
			}
			set
			{
				Class previousValue = this._Class1.Entity;
				if (((previousValue != value) 
							|| (this._Class1.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Class1.Entity = null;
						previousValue.Students.Remove(this);
					}
					this._Class1.Entity = value;
					if ((value != null))
					{
						value.Students.Add(this);
						this._Class = value.ClassId;
					}
					else
					{
						this._Class = default(int);
					}
					this.SendPropertyChanged("Class1");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Medium_Student", Storage="_Medium", ThisKey="MediumId", OtherKey="MediumId", IsForeignKey=true)]
		public Medium Medium
		{
			get
			{
				return this._Medium.Entity;
			}
			set
			{
				Medium previousValue = this._Medium.Entity;
				if (((previousValue != value) 
							|| (this._Medium.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Medium.Entity = null;
						previousValue.Students.Remove(this);
					}
					this._Medium.Entity = value;
					if ((value != null))
					{
						value.Students.Add(this);
						this._MediumId = value.MediumId;
					}
					else
					{
						this._MediumId = default(int);
					}
					this.SendPropertyChanged("Medium");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Section_Student", Storage="_Section", ThisKey="SectionId", OtherKey="SectionId", IsForeignKey=true)]
		public Section Section
		{
			get
			{
				return this._Section.Entity;
			}
			set
			{
				Section previousValue = this._Section.Entity;
				if (((previousValue != value) 
							|| (this._Section.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Section.Entity = null;
						previousValue.Students.Remove(this);
					}
					this._Section.Entity = value;
					if ((value != null))
					{
						value.Students.Add(this);
						this._SectionId = value.SectionId;
					}
					else
					{
						this._SectionId = default(int);
					}
					this.SendPropertyChanged("Section");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Accounts(Account entity)
		{
			this.SendPropertyChanging();
			entity.Student = this;
		}
		
		private void detach_Accounts(Account entity)
		{
			this.SendPropertyChanging();
			entity.Student = null;
		}
		
		private void attach_ScholarShipDetails(ScholarShipDetail entity)
		{
			this.SendPropertyChanging();
			entity.Student = this;
		}
		
		private void detach_ScholarShipDetails(ScholarShipDetail entity)
		{
			this.SendPropertyChanging();
			entity.Student = null;
		}
		
		private void attach_TransactionDetails(TransactionDetail entity)
		{
			this.SendPropertyChanging();
			entity.Student = this;
		}
		
		private void detach_TransactionDetails(TransactionDetail entity)
		{
			this.SendPropertyChanging();
			entity.Student = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.SubjectMaster")]
	public partial class SubjectMaster : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _SubjectId;
		
		private string _SubjectName;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnSubjectIdChanging(int value);
    partial void OnSubjectIdChanged();
    partial void OnSubjectNameChanging(string value);
    partial void OnSubjectNameChanged();
    #endregion
		
		public SubjectMaster()
		{
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_SubjectId", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int SubjectId
		{
			get
			{
				return this._SubjectId;
			}
			set
			{
				if ((this._SubjectId != value))
				{
					this.OnSubjectIdChanging(value);
					this.SendPropertyChanging();
					this._SubjectId = value;
					this.SendPropertyChanged("SubjectId");
					this.OnSubjectIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_SubjectName", DbType="NVarChar(50) NOT NULL", CanBeNull=false)]
		public string SubjectName
		{
			get
			{
				return this._SubjectName;
			}
			set
			{
				if ((this._SubjectName != value))
				{
					this.OnSubjectNameChanging(value);
					this.SendPropertyChanging();
					this._SubjectName = value;
					this.SendPropertyChanged("SubjectName");
					this.OnSubjectNameChanged();
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.SubjectTable")]
	public partial class SubjectTable : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _ClassId;
		
		private int _MediumId;
		
		private int _SubjectId;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnClassIdChanging(int value);
    partial void OnClassIdChanged();
    partial void OnMediumIdChanging(int value);
    partial void OnMediumIdChanged();
    partial void OnSubjectIdChanging(int value);
    partial void OnSubjectIdChanged();
    #endregion
		
		public SubjectTable()
		{
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ClassId", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int ClassId
		{
			get
			{
				return this._ClassId;
			}
			set
			{
				if ((this._ClassId != value))
				{
					this.OnClassIdChanging(value);
					this.SendPropertyChanging();
					this._ClassId = value;
					this.SendPropertyChanged("ClassId");
					this.OnClassIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_MediumId", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int MediumId
		{
			get
			{
				return this._MediumId;
			}
			set
			{
				if ((this._MediumId != value))
				{
					this.OnMediumIdChanging(value);
					this.SendPropertyChanging();
					this._MediumId = value;
					this.SendPropertyChanged("MediumId");
					this.OnMediumIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_SubjectId", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int SubjectId
		{
			get
			{
				return this._SubjectId;
			}
			set
			{
				if ((this._SubjectId != value))
				{
					this.OnSubjectIdChanging(value);
					this.SendPropertyChanging();
					this._SubjectId = value;
					this.SendPropertyChanged("SubjectId");
					this.OnSubjectIdChanged();
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.TransactionDetails")]
	public partial class TransactionDetail : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _TransactionDetailsId;
		
		private int _AccountId;
		
		private int _StudentId;
		
		private int _AmountPaid;
		
		private System.Nullable<System.DateTime> _DatePaid;
		
		private int _UserId;
		
		private System.Nullable<bool> _Approved;
		
		private int _AcademicYearId;
		
		private System.Nullable<bool> _Rejected;
		
		private EntityRef<AcademicYear> _AcademicYear;
		
		private EntityRef<Account> _Account;
		
		private EntityRef<Student> _Student;
		
		private EntityRef<User> _User;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnTransactionDetailsIdChanging(int value);
    partial void OnTransactionDetailsIdChanged();
    partial void OnAccountIdChanging(int value);
    partial void OnAccountIdChanged();
    partial void OnStudentIdChanging(int value);
    partial void OnStudentIdChanged();
    partial void OnAmountPaidChanging(int value);
    partial void OnAmountPaidChanged();
    partial void OnDatePaidChanging(System.Nullable<System.DateTime> value);
    partial void OnDatePaidChanged();
    partial void OnUserIdChanging(int value);
    partial void OnUserIdChanged();
    partial void OnApprovedChanging(System.Nullable<bool> value);
    partial void OnApprovedChanged();
    partial void OnAcademicYearIdChanging(int value);
    partial void OnAcademicYearIdChanged();
    partial void OnRejectedChanging(System.Nullable<bool> value);
    partial void OnRejectedChanged();
    #endregion
		
		public TransactionDetail()
		{
			this._AcademicYear = default(EntityRef<AcademicYear>);
			this._Account = default(EntityRef<Account>);
			this._Student = default(EntityRef<Student>);
			this._User = default(EntityRef<User>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_TransactionDetailsId", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int TransactionDetailsId
		{
			get
			{
				return this._TransactionDetailsId;
			}
			set
			{
				if ((this._TransactionDetailsId != value))
				{
					this.OnTransactionDetailsIdChanging(value);
					this.SendPropertyChanging();
					this._TransactionDetailsId = value;
					this.SendPropertyChanged("TransactionDetailsId");
					this.OnTransactionDetailsIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_AccountId", DbType="Int NOT NULL")]
		public int AccountId
		{
			get
			{
				return this._AccountId;
			}
			set
			{
				if ((this._AccountId != value))
				{
					if (this._Account.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnAccountIdChanging(value);
					this.SendPropertyChanging();
					this._AccountId = value;
					this.SendPropertyChanged("AccountId");
					this.OnAccountIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_StudentId", DbType="Int NOT NULL")]
		public int StudentId
		{
			get
			{
				return this._StudentId;
			}
			set
			{
				if ((this._StudentId != value))
				{
					if (this._Student.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnStudentIdChanging(value);
					this.SendPropertyChanging();
					this._StudentId = value;
					this.SendPropertyChanged("StudentId");
					this.OnStudentIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_AmountPaid", DbType="Int NOT NULL")]
		public int AmountPaid
		{
			get
			{
				return this._AmountPaid;
			}
			set
			{
				if ((this._AmountPaid != value))
				{
					this.OnAmountPaidChanging(value);
					this.SendPropertyChanging();
					this._AmountPaid = value;
					this.SendPropertyChanged("AmountPaid");
					this.OnAmountPaidChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_DatePaid", DbType="DateTime")]
		public System.Nullable<System.DateTime> DatePaid
		{
			get
			{
				return this._DatePaid;
			}
			set
			{
				if ((this._DatePaid != value))
				{
					this.OnDatePaidChanging(value);
					this.SendPropertyChanging();
					this._DatePaid = value;
					this.SendPropertyChanged("DatePaid");
					this.OnDatePaidChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_UserId", DbType="Int NOT NULL")]
		public int UserId
		{
			get
			{
				return this._UserId;
			}
			set
			{
				if ((this._UserId != value))
				{
					if (this._User.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnUserIdChanging(value);
					this.SendPropertyChanging();
					this._UserId = value;
					this.SendPropertyChanged("UserId");
					this.OnUserIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Approved", DbType="Bit")]
		public System.Nullable<bool> Approved
		{
			get
			{
				return this._Approved;
			}
			set
			{
				if ((this._Approved != value))
				{
					this.OnApprovedChanging(value);
					this.SendPropertyChanging();
					this._Approved = value;
					this.SendPropertyChanged("Approved");
					this.OnApprovedChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_AcademicYearId", DbType="Int NOT NULL")]
		public int AcademicYearId
		{
			get
			{
				return this._AcademicYearId;
			}
			set
			{
				if ((this._AcademicYearId != value))
				{
					if (this._AcademicYear.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnAcademicYearIdChanging(value);
					this.SendPropertyChanging();
					this._AcademicYearId = value;
					this.SendPropertyChanged("AcademicYearId");
					this.OnAcademicYearIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Rejected", DbType="Bit")]
		public System.Nullable<bool> Rejected
		{
			get
			{
				return this._Rejected;
			}
			set
			{
				if ((this._Rejected != value))
				{
					this.OnRejectedChanging(value);
					this.SendPropertyChanging();
					this._Rejected = value;
					this.SendPropertyChanged("Rejected");
					this.OnRejectedChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="AcademicYear_TransactionDetail", Storage="_AcademicYear", ThisKey="AcademicYearId", OtherKey="AcademicYearId", IsForeignKey=true)]
		public AcademicYear AcademicYear
		{
			get
			{
				return this._AcademicYear.Entity;
			}
			set
			{
				AcademicYear previousValue = this._AcademicYear.Entity;
				if (((previousValue != value) 
							|| (this._AcademicYear.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._AcademicYear.Entity = null;
						previousValue.TransactionDetails.Remove(this);
					}
					this._AcademicYear.Entity = value;
					if ((value != null))
					{
						value.TransactionDetails.Add(this);
						this._AcademicYearId = value.AcademicYearId;
					}
					else
					{
						this._AcademicYearId = default(int);
					}
					this.SendPropertyChanged("AcademicYear");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Account_TransactionDetail", Storage="_Account", ThisKey="AccountId", OtherKey="AccountId", IsForeignKey=true)]
		public Account Account
		{
			get
			{
				return this._Account.Entity;
			}
			set
			{
				Account previousValue = this._Account.Entity;
				if (((previousValue != value) 
							|| (this._Account.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Account.Entity = null;
						previousValue.TransactionDetails.Remove(this);
					}
					this._Account.Entity = value;
					if ((value != null))
					{
						value.TransactionDetails.Add(this);
						this._AccountId = value.AccountId;
					}
					else
					{
						this._AccountId = default(int);
					}
					this.SendPropertyChanged("Account");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Student_TransactionDetail", Storage="_Student", ThisKey="StudentId", OtherKey="StudentId", IsForeignKey=true)]
		public Student Student
		{
			get
			{
				return this._Student.Entity;
			}
			set
			{
				Student previousValue = this._Student.Entity;
				if (((previousValue != value) 
							|| (this._Student.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Student.Entity = null;
						previousValue.TransactionDetails.Remove(this);
					}
					this._Student.Entity = value;
					if ((value != null))
					{
						value.TransactionDetails.Add(this);
						this._StudentId = value.StudentId;
					}
					else
					{
						this._StudentId = default(int);
					}
					this.SendPropertyChanged("Student");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="User_TransactionDetail", Storage="_User", ThisKey="UserId", OtherKey="UserId", IsForeignKey=true)]
		public User User
		{
			get
			{
				return this._User.Entity;
			}
			set
			{
				User previousValue = this._User.Entity;
				if (((previousValue != value) 
							|| (this._User.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._User.Entity = null;
						previousValue.TransactionDetails.Remove(this);
					}
					this._User.Entity = value;
					if ((value != null))
					{
						value.TransactionDetails.Add(this);
						this._UserId = value.UserId;
					}
					else
					{
						this._UserId = default(int);
					}
					this.SendPropertyChanged("User");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.trig")]
	public partial class trig : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _id;
		
		private string _name;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnidChanging(int value);
    partial void OnidChanged();
    partial void OnnameChanging(string value);
    partial void OnnameChanged();
    #endregion
		
		public trig()
		{
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_id", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int id
		{
			get
			{
				return this._id;
			}
			set
			{
				if ((this._id != value))
				{
					this.OnidChanging(value);
					this.SendPropertyChanging();
					this._id = value;
					this.SendPropertyChanged("id");
					this.OnidChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_name", DbType="VarChar(50)")]
		public string name
		{
			get
			{
				return this._name;
			}
			set
			{
				if ((this._name != value))
				{
					this.OnnameChanging(value);
					this.SendPropertyChanging();
					this._name = value;
					this.SendPropertyChanged("name");
					this.OnnameChanged();
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.trig_archive")]
	public partial class trig_archive
	{
		
		private System.Nullable<int> _id;
		
		private string _name;
		
		public trig_archive()
		{
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_id", DbType="Int")]
		public System.Nullable<int> id
		{
			get
			{
				return this._id;
			}
			set
			{
				if ((this._id != value))
				{
					this._id = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_name", DbType="VarChar(50)")]
		public string name
		{
			get
			{
				return this._name;
			}
			set
			{
				if ((this._name != value))
				{
					this._name = value;
				}
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.UserGroupAssociation")]
	public partial class UserGroupAssociation : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _UserId;
		
		private int _GroupId;
		
		private EntityRef<UserGroupAssociation> _UserGroupAssociation2;
		
		private EntityRef<Group> _Group;
		
		private EntityRef<User> _User;
		
		private EntityRef<UserGroupAssociation> _UserGroupAssociation1;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnUserIdChanging(int value);
    partial void OnUserIdChanged();
    partial void OnGroupIdChanging(int value);
    partial void OnGroupIdChanged();
    #endregion
		
		public UserGroupAssociation()
		{
			this._UserGroupAssociation2 = default(EntityRef<UserGroupAssociation>);
			this._Group = default(EntityRef<Group>);
			this._User = default(EntityRef<User>);
			this._UserGroupAssociation1 = default(EntityRef<UserGroupAssociation>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_UserId", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int UserId
		{
			get
			{
				return this._UserId;
			}
			set
			{
				if ((this._UserId != value))
				{
					if ((this._User.HasLoadedOrAssignedValue || this._UserGroupAssociation1.HasLoadedOrAssignedValue))
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnUserIdChanging(value);
					this.SendPropertyChanging();
					this._UserId = value;
					this.SendPropertyChanged("UserId");
					this.OnUserIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_GroupId", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int GroupId
		{
			get
			{
				return this._GroupId;
			}
			set
			{
				if ((this._GroupId != value))
				{
					if ((this._Group.HasLoadedOrAssignedValue || this._UserGroupAssociation1.HasLoadedOrAssignedValue))
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnGroupIdChanging(value);
					this.SendPropertyChanging();
					this._GroupId = value;
					this.SendPropertyChanged("GroupId");
					this.OnGroupIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="UserGroupAssociation_UserGroupAssociation", Storage="_UserGroupAssociation2", ThisKey="UserId,GroupId", OtherKey="UserId,GroupId", IsUnique=true, IsForeignKey=false)]
		public UserGroupAssociation UserGroupAssociation2
		{
			get
			{
				return this._UserGroupAssociation2.Entity;
			}
			set
			{
				UserGroupAssociation previousValue = this._UserGroupAssociation2.Entity;
				if (((previousValue != value) 
							|| (this._UserGroupAssociation2.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._UserGroupAssociation2.Entity = null;
						previousValue.UserGroupAssociation1 = null;
					}
					this._UserGroupAssociation2.Entity = value;
					if ((value != null))
					{
						value.UserGroupAssociation1 = this;
					}
					this.SendPropertyChanged("UserGroupAssociation2");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Group_UserGroupAssociation", Storage="_Group", ThisKey="GroupId", OtherKey="GroupId", IsForeignKey=true)]
		public Group Group
		{
			get
			{
				return this._Group.Entity;
			}
			set
			{
				Group previousValue = this._Group.Entity;
				if (((previousValue != value) 
							|| (this._Group.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Group.Entity = null;
						previousValue.UserGroupAssociations.Remove(this);
					}
					this._Group.Entity = value;
					if ((value != null))
					{
						value.UserGroupAssociations.Add(this);
						this._GroupId = value.GroupId;
					}
					else
					{
						this._GroupId = default(int);
					}
					this.SendPropertyChanged("Group");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="User_UserGroupAssociation", Storage="_User", ThisKey="UserId", OtherKey="UserId", IsForeignKey=true)]
		public User User
		{
			get
			{
				return this._User.Entity;
			}
			set
			{
				User previousValue = this._User.Entity;
				if (((previousValue != value) 
							|| (this._User.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._User.Entity = null;
						previousValue.UserGroupAssociations.Remove(this);
					}
					this._User.Entity = value;
					if ((value != null))
					{
						value.UserGroupAssociations.Add(this);
						this._UserId = value.UserId;
					}
					else
					{
						this._UserId = default(int);
					}
					this.SendPropertyChanged("User");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="UserGroupAssociation_UserGroupAssociation", Storage="_UserGroupAssociation1", ThisKey="UserId,GroupId", OtherKey="UserId,GroupId", IsForeignKey=true)]
		public UserGroupAssociation UserGroupAssociation1
		{
			get
			{
				return this._UserGroupAssociation1.Entity;
			}
			set
			{
				UserGroupAssociation previousValue = this._UserGroupAssociation1.Entity;
				if (((previousValue != value) 
							|| (this._UserGroupAssociation1.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._UserGroupAssociation1.Entity = null;
						previousValue.UserGroupAssociation2 = null;
					}
					this._UserGroupAssociation1.Entity = value;
					if ((value != null))
					{
						value.UserGroupAssociation2 = this;
						this._UserId = value.UserId;
						this._GroupId = value.GroupId;
					}
					else
					{
						this._UserId = default(int);
						this._GroupId = default(int);
					}
					this.SendPropertyChanged("UserGroupAssociation1");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
}
#pragma warning restore 1591
